// WARNING: generated by kopium - manual changes will be overwritten
// kopium command: kopium -Af -
// kopium version: 0.16.5

use kube::CustomResource;
use schemars::JsonSchema;
use serde::{Deserialize, Serialize};

/// DockerMachineSpec defines the desired state of DockerMachine.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(
    group = "infrastructure.cluster.x-k8s.io",
    version = "v1beta1",
    kind = "DockerMachine",
    plural = "dockermachines"
)]
#[kube(namespaced)]
#[kube(status = "DockerMachineStatus")]
pub struct DockerMachineSpec {
    /// BootstrapTimeout is the total amount of time to wait for the machine to bootstrap before timing out.
    /// The default value is 3m.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bootstrapTimeout"
    )]
    pub bootstrap_timeout: Option<String>,
    /// Bootstrapped is true when the kubeadm bootstrapping has been run
    /// against this machine
    ///
    ///
    /// Deprecated: This field will be removed in the next apiVersion.
    /// When removing also remove from staticcheck exclude-rules for SA1019 in golangci.yml.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bootstrapped: Option<bool>,
    /// CustomImage allows customizing the container image that is used for
    /// running the machine
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    pub custom_image: Option<String>,
    /// ExtraMounts describes additional mount points for the node container
    /// These may be used to bind a hostPath
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "extraMounts"
    )]
    pub extra_mounts: Option<Vec<DockerMachineExtraMounts>>,
    /// PreLoadImages allows to pre-load images in a newly created machine. This can be used to
    /// speed up tests by avoiding e.g. to download CNI images on all the containers.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preLoadImages"
    )]
    pub pre_load_images: Option<Vec<String>>,
    /// ProviderID will be the container name in ProviderID format (docker:////<containername>)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerID"
    )]
    pub provider_id: Option<String>,
}

/// Mount specifies a host volume to mount into a container.
/// This is a simplified version of kind v1alpha4.Mount types.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DockerMachineExtraMounts {
    /// Path of the mount within the container.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerPath"
    )]
    pub container_path: Option<String>,
    /// Path of the mount on the host. If the hostPath doesn't exist, then runtimes
    /// should report error. If the hostpath is a symbolic link, runtimes should
    /// follow the symlink and mount the real destination to container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<String>,
    /// If set, the mount is read-only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// DockerMachineStatus defines the observed state of DockerMachine.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema, Default)]
pub struct DockerMachineStatus {
    /// Addresses contains the associated addresses for the docker machine.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<DockerMachineStatusAddresses>>,
    /// Conditions defines current service state of the DockerMachine.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<DockerMachineStatusConditions>>,
    /// LoadBalancerConfigured denotes that the machine has been
    /// added to the load balancer
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loadBalancerConfigured"
    )]
    pub load_balancer_configured: Option<bool>,
    /// Ready denotes that the machine (docker container) is ready
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ready: Option<bool>,
}

/// MachineAddress contains information for the node's address.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DockerMachineStatusAddresses {
    /// The machine address.
    pub address: String,
    /// Machine address type, one of Hostname, ExternalIP, InternalIP, ExternalDNS or InternalDNS.
    #[serde(rename = "type")]
    pub r#type: String,
}

/// Condition defines an observation of a Cluster API resource operational state.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DockerMachineStatusConditions {
    /// Last time the condition transitioned from one status to another.
    /// This should be when the underlying condition changed. If that is not known, then using the time when
    /// the API field changed is acceptable.
    #[serde(rename = "lastTransitionTime")]
    pub last_transition_time: String,
    /// A human readable message indicating details about the transition.
    /// This field may be empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The reason for the condition's last transition in CamelCase.
    /// The specific API may choose whether or not this field is considered a guaranteed API.
    /// This field may not be empty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Severity provides an explicit classification of Reason code, so the users or machines can immediately
    /// understand the current situation and act accordingly.
    /// The Severity field MUST be set only when Status=False.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
    /// Status of the condition, one of True, False, Unknown.
    pub status: String,
    /// Type of condition in CamelCase or in foo.example.com/CamelCase.
    /// Many .condition.type values are consistent across resources like Available, but because arbitrary conditions
    /// can be useful (see .node.status.conditions), the ability to deconflict is important.
    #[serde(rename = "type")]
    pub r#type: String,
}
